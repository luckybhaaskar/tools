let input = document.querySelector("#input");
let output = document.querySelector("#output");
let jsIndentSize = document.querySelector("#jsindent");
let cssIndentSize = document.querySelector("#cssindent");
let loadFile = document.querySelector("#loadfile");
let loadurl = document.querySelector("#loadfile");

let options = {
    end_with_newline: true,
    js: {
        indent_size: 2
    },
    css: {
        indent_size: 2
    }
};
const config = {
        styleActiveLine: !0,
        lineNumbers: !0,
        tabSize: 4,
        mode: "xml"
    },
    editorInput = CodeMirror.fromTextArea(document.getElementById("input"), config),
    editorOutput = CodeMirror.fromTextArea(document.getElementById("output"), config);
let filename = "index"

function getOptions() {
    options.js.indent_size = parseInt(jsIndentSize.value);
    options.css.indent_size = parseInt(cssIndentSize.value);
    return options;
}

function beautify(data, options) {
    return html_beautify(data, options)
}

async function minify(data) {
    try {
        let result = await HTMLMinifier.minify(editorInput.getValue(), {
            "caseSensitive": false,
            "collapseBooleanAttributes": true,
            "collapseInlineTagWhitespace": false,
            "collapseWhitespace": true,
            "conservativeCollapse": false,
            "decodeEntities": true,
            "html5": true,
            "includeAutoGeneratedTags": false,
            "keepClosingSlash": false,
            "minifyCSS": true,
            "minifyJS": true,
            "minifyURLs": false,
            "noNewlinesBeforeTagClose": false,
            "preserveLineBreaks": false,
            "preventAttributesEscaping": false,
            "processConditionalComments": true,
            "processScripts": [
                "text/html"
            ],
            "removeAttributeQuotes": true,
            "removeComments": true,
            "removeEmptyAttributes": true,
            "removeEmptyElements": false,
            "removeOptionalTags": true,
            "removeRedundantAttributes": true,
            "removeScriptTypeAttributes": true,
            "removeStyleLinkTypeAttributes": true,
            "removeTagWhitespace": true,
            "sortAttributes": true,
            "sortClassName": true,
            "trimCustomFragments": true,
            "useShortDoctype": true
        })
        return result;
    } catch (e) {
        alert("Couldn't Minify");
    }
}

function onSaveClicked() {
    let url = "data:x-application/text," + escape(editorOutput.getValue());
    dl.href = url;
    dl.download = filename;
    dl.click();
}

function onCopyClicked() {
    navigator.clipboard.writeText(editorOutput.getValue());
}

function getFilenameFromUrl(url) {
    const pathname = new URL(url).pathname;
    const index = pathname.lastIndexOf('/');
    return pathname.substring(index + 1)
}

function onLoadFromUrlClicked() {
    let url = prompt("Url:");
    if (url == null || url == "") {
        return;
    }
    fetch(url)
        .then((response) => response.text())
        .then((data) => editorInput.setValue(data))
        .catch((e) => alert("Couldn't send request!"));
    filename = `${getFilenameFromUrl(url).split('.').slice(0, -1).join('.')}`;
}

function onLoadFromFileClicked() {
    var reader = new FileReader();
    reader.readAsText(loadFile.files[0], "UTF-8");
    reader.onload = function (evt) {
        editorInput.setValue(evt.target.result)
    }
    reader.onerror = function (evt) {
        alert("Couldn't read the file");
    }
    filename = `${loadFile.files[0].name.split('.').slice(0, -1).join('.')}`;
}

function onBeautifyClicked() {
    const newOptions = getOptions();
    const beautified = beautify(editorInput.getValue(), newOptions);
    editorOutput.setValue(beautified)
    filename += "-beautified.html";
}

const onMinifyClicked = async () => {
    const minified = await minify(editorInput.getValue());
    editorOutput.setValue(minified)
    filename += "-minified.html";
}
